{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nconst initialInputState = {\n  value: '',\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  return {\n    value: '',\n    isTouched: false\n  };\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: 'INPUT',\n      value: event.target.value\n    });\n  };\n\n  const valueBlurHandler = event => {\n    dispatch({\n      type: 'BLUR'\n    });\n  };\n\n  const reset = () => {\n    dispatch({\n      type: 'RESET'\n    });\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    valueBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/tracyking/Desktop/React Apps/react-form-project/src/hooks/use-input.js"],"names":["useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","type","target","valueBlurHandler","reset","enteredValue","isValid"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,SAAS,EAAE;AAFa,CAA1B;;AAIA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,SAAO;AACLJ,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,SAAS,EAAE;AAFN,GAAP;AAID,CALD;;AAOA,MAAMI,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBV,UAAU,CAACI,iBAAD,EAAoBH,iBAApB,CAAzC;AAEA,QAAMU,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACP,KAAZ,CAAlC;AACA,QAAMU,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACN,SAA7C;;AAEA,QAAMU,kBAAkB,GAAIC,KAAD,IAAW;AACpCJ,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAE,OAAP;AAAgBb,MAAAA,KAAK,EAAEY,KAAK,CAACE,MAAN,CAAad;AAApC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMe,gBAAgB,GAAIH,KAAD,IAAW;AAClCJ,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMG,KAAK,GAAG,MAAM;AAClBR,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACD,GAFD;;AAIA,SAAO;AACLb,IAAAA,KAAK,EAAEiB,YADF;AAELC,IAAAA,OAAO,EAAET,YAFJ;AAGLC,IAAAA,QAHK;AAILC,IAAAA,kBAJK;AAKLI,IAAAA,gBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CA1BD;;GAAMX,Q;;AA4BN,eAAeA,QAAf","sourcesContent":["import { useReducer } from 'react';\n\nconst initialInputState = {\n  value: '',\n  isTouched: false,\n};\nconst inputStateReducer = (state, action) => {\n  return {\n    value: '',\n    isTouched: false,\n  };\n};\n\nconst useInput = (validateValue) => {\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = (event) => {\n    dispatch({type: 'INPUT', value: event.target.value});\n  };\n\n  const valueBlurHandler = (event) => {\n    dispatch({type: 'BLUR'});\n  };\n\n  const reset = () => {\n    dispatch({type: 'RESET'});\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    valueBlurHandler,\n    reset\n  }\n};\n\nexport default useInput;\n"]},"metadata":{},"sourceType":"module"}